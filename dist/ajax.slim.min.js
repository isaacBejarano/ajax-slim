"use strict";
var AjaxSlim = (function () {
	function t() {
		t.list.push(this),
			window.XMLHttpRequest ? (this.XHR = new XMLHttpRequest()) : (this.XHR = new ActiveXObject("Microsoft.XMLHTTP"));
	}
	return (
		Object.defineProperty(t.prototype, "getXHR", {
			get: function () {
				return this.XHR;
			},
			enumerable: !1,
			configurable: !0,
		}),
		Object.defineProperty(t, "getList", {
			get: function () {
				return t.list;
			},
			enumerable: !1,
			configurable: !0,
		}),
		(t.prototype.ready = function (n) {
			var o = this;
			return (
				(this.XHR.onreadystatechange = function () {
					var t = o.XHR.readyState,
						e = o.XHR.status,
						s = o.XHR.statusText;
					switch (t) {
						case 0:
							console.error("request not initialized\n\t\t\t\t\t\t\t\nstatus: " + e + ". " + s);
							break;
						case 1:
							console.log("Server connection established \t\t\t\t\t\t\t\nstatus: " + e + ". " + s);
							break;
						case 2:
							console.log("Request received \t\t\t\t\t\t\t\nstatus: " + e + ". " + s);
							break;
						case 3:
							console.log("Processing request... \t\t\t\t\t\t\t\nstatus: " + e + ". " + s);
							break;
						case 4:
							console.log("Response ready \t\t\t\t\t\t\t\nstatus: " + e + ". " + s);
							break;
						default:
							console.log("Wrong request \t\t\t\t\t\t\t\nstatus: " + e + ". " + s);
					}
					4 === t &&
						200 === e &&
						(console.log(o.XHR.getAllResponseHeaders()),
						console.log(o.XHR.responseText),
						n && o.XHR.responseText && (n.innerHTML = o.XHR.responseText));
				}),
				this
			);
		}),
		(t.prototype.open = function (t) {
			var e = t.method,
				s = t.url,
				n = t.async,
				o = void 0 === n || n,
				n = t.user,
				t = t.pass;
			return this.XHR.open(e.toUpperCase(), s, o, n, t), this;
		}),
		(t.prototype.send = function (t) {
			return this.XHR.send(t), this;
		}),
		(t.prototype.abort = function () {
			this.XHR.abort();
		}),
		(t.list = []),
		t
	);
})();
